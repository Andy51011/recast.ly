import VideoListEntry from '../../src/components/VideoListEntry.js';

describe('VideoListEntry', function () {
  var {
    renderIntoDocument,
    findRenderedDOMComponentWithClass
  } = ReactTestUtils;

  var cuteCatVideo, superCuteCatVideo, hackReactorVideo;

  // In order to leverage React's test utility function `findRenderedDOMComponentWithClass`
  // for stateless functional components, we must wrap them in a class component
  // Wrapper.jsx defined a Wrapper component to use in our tests.
  // Read more here: https://github.com/facebook/react/issues/4972

  beforeEach(function () {
    cuteCatVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoListEntry, { video: window.fakeVideoData[0] })
    ));

    superCuteCatVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoListEntry, { video: window.fakeVideoData[1] })
    ));

    hackReactorVideo = renderIntoDocument(React.createElement(
      Wrapper,
      null,
      React.createElement(VideoListEntry, { video: window.fakeVideoData[2] })
    ));
  });

  //should be a stateless function; meaning that we need to write a class that extends React.Componenet;
  it('should be a stateless functional component', function () {
    expect(React.Component.isPrototypeOf(VideoListEntry)).to.be.false;
  });

  //dynamically updates the videos image; findRenderedDOMComponentWithClass of 'media object'
  it('should dynamically render a video\'s image', function () {
    var cuteCatVideoImageElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'media-object');
    var superCuteCatVideoImageElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'media-object');
    var hackReactorVideoImageElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'media-object');

    expect(cuteCatVideoImageElement.src).to.equal('http://www.fndvisions.org/img/cutecat.jpg');
    expect(superCuteCatVideoImageElement.src).to.equal('https://pbs.twimg.com/profile_images/567285191169687553/7kg_TF4l.jpeg');
    expect(hackReactorVideoImageElement.src).to.equal('https://d3c5s1hmka2e2b.cloudfront.net/uploads/topic/image/14/hack_reactor.png');
  });

  //tests automatically renders the video's title when the video-list-entry-title;
  it('should dynamically render a video\'s title', function () {
    var cuteCatVideoTitleElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'video-list-entry-title');
    var superCuteCatVideoTitleElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'video-list-entry-title');
    var hackReactorVideoTitleElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'video-list-entry-title');

    //gets the the innerHTML to equal;
    expect(cuteCatVideoTitleElement.innerHTML).to.equal('Cute cat video');
    expect(superCuteCatVideoTitleElement.innerHTML).to.equal('Super cute cat video');
    expect(hackReactorVideoTitleElement.innerHTML).to.equal('Hack Reactor opens extension school on Mars');
  });

  //dynamically renders the video;
  it('should dynamically render a video\'s description', function () {
    var cuteCatVideoDescriptionElement = findRenderedDOMComponentWithClass(cuteCatVideo, 'video-list-entry-detail');
    var superCuteCatVideoDescriptionElement = findRenderedDOMComponentWithClass(superCuteCatVideo, 'video-list-entry-detail');
    var hackReactorVideoDescriptionElement = findRenderedDOMComponentWithClass(hackReactorVideo, 'video-list-entry-detail');

    expect(cuteCatVideoDescriptionElement.innerHTML).to.equal('The best cat video on the internet!');
    expect(superCuteCatVideoDescriptionElement.innerHTML).to.equal('Better than the best cat video on the internet!');
    expect(hackReactorVideoDescriptionElement.innerHTML).to.equal('Watch the ribbon cutting of the first coding bootcamp in space');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,