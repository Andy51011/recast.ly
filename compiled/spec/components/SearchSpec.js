import App from '../../src/components/App.js';

describe('Search', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;

  var app, searchYouTubeStub;

  //ADVANCED TEST
  //=======================================================================>

  xdescribe('when rendering live data from YouTube', function () {
    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.onCall(0).yields(window.fakeVideoData);
      searchYouTubeStub.onCall(1).yields(window.moreFakeVideoData);

      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should load live data when app is initialized', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });
    });

    it('should update the video list when typing into the input box', function () {
      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      videoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title);
      });

      var searchInputElement = findRenderedDOMComponentWithClass(app, 'form-control');
      Simulate.change(searchInputElement, { target: { value: 'React tutorial' } });

      var newVideoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');
      newVideoEntryTitleElements.forEach((videoEntryTitle, i) => {
        expect(videoEntryTitle.innerHTML).to.equal(moreFakeVideoData[i].snippet.title);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9TZWFyY2hTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwic2VhcmNoWW91VHViZVN0dWIiLCJ4ZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwic2lub24iLCJzdHViIiwib25DYWxsIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsIm1vcmVGYWtlVmlkZW9EYXRhIiwiaXQiLCJ2aWRlb0VudHJ5VGl0bGVFbGVtZW50cyIsImZvckVhY2giLCJ2aWRlb0VudHJ5VGl0bGUiLCJpIiwiZXhwZWN0IiwiaW5uZXJIVE1MIiwidG8iLCJlcXVhbCIsInNuaXBwZXQiLCJ0aXRsZSIsInNlYXJjaElucHV0RWxlbWVudCIsImNoYW5nZSIsInRhcmdldCIsInZhbHVlIiwibmV3VmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFVLFFBQVYsRUFBb0IsWUFBVztBQUM3QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxjQUxKOztBQU9BLE1BQUlDLEdBQUosRUFBU0MsaUJBQVQ7O0FBRUE7QUFDQTs7QUFFQUMsWUFBVSx1Q0FBVixFQUFtRCxZQUFXO0FBQzVEQyxlQUFXLFlBQVc7QUFDcEJGLDBCQUFvQkcsTUFBTUMsSUFBTixFQUFwQjtBQUNBSix3QkFBa0JLLE1BQWxCLENBQXlCLENBQXpCLEVBQTRCQyxNQUE1QixDQUFtQ0MsT0FBT0MsYUFBMUM7QUFDQVIsd0JBQWtCSyxNQUFsQixDQUF5QixDQUF6QixFQUE0QkMsTUFBNUIsQ0FBbUNDLE9BQU9FLGlCQUExQzs7QUFFQVYsWUFBTUosbUJBQ0osb0JBQUMsR0FBRCxJQUFLLGVBQWVLLGlCQUFwQixHQURJLENBQU47QUFHRCxLQVJEOztBQVVBVSxPQUFHLCtDQUFILEVBQW9ELFlBQVc7QUFDN0QsVUFBSUMsMEJBQTBCZCxtQ0FBbUNFLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUE5QjtBQUNBWSw4QkFBd0JDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JDLENBQWxCLEtBQXdCO0FBQ3REQyxlQUFPRixnQkFBZ0JHLFNBQXZCLEVBQWtDQyxFQUFsQyxDQUFxQ0MsS0FBckMsQ0FBMkNWLGNBQWNNLENBQWQsRUFBaUJLLE9BQWpCLENBQXlCQyxLQUFwRTtBQUNELE9BRkQ7QUFHRCxLQUxEOztBQU9BVixPQUFHLDZEQUFILEVBQWtFLFlBQVc7QUFDM0UsVUFBSUMsMEJBQTBCZCxtQ0FBbUNFLEdBQW5DLEVBQXdDLHdCQUF4QyxDQUE5QjtBQUNBWSw4QkFBd0JDLE9BQXhCLENBQWdDLENBQUNDLGVBQUQsRUFBa0JDLENBQWxCLEtBQXdCO0FBQ3REQyxlQUFPRixnQkFBZ0JHLFNBQXZCLEVBQWtDQyxFQUFsQyxDQUFxQ0MsS0FBckMsQ0FBMkNWLGNBQWNNLENBQWQsRUFBaUJLLE9BQWpCLENBQXlCQyxLQUFwRTtBQUNELE9BRkQ7O0FBSUEsVUFBSUMscUJBQXFCekIsa0NBQWtDRyxHQUFsQyxFQUF1QyxjQUF2QyxDQUF6QjtBQUNBTCxlQUFTNEIsTUFBVCxDQUFnQkQsa0JBQWhCLEVBQW9DLEVBQUNFLFFBQVEsRUFBQ0MsT0FBTyxnQkFBUixFQUFULEVBQXBDOztBQUVBLFVBQUlDLDZCQUE2QjVCLG1DQUFtQ0UsR0FBbkMsRUFBd0Msd0JBQXhDLENBQWpDO0FBQ0EwQixpQ0FBMkJiLE9BQTNCLENBQW1DLENBQUNDLGVBQUQsRUFBa0JDLENBQWxCLEtBQXdCO0FBQ3pEQyxlQUFPRixnQkFBZ0JHLFNBQXZCLEVBQWtDQyxFQUFsQyxDQUFxQ0MsS0FBckMsQ0FBMkNULGtCQUFrQkssQ0FBbEIsRUFBcUJLLE9BQXJCLENBQTZCQyxLQUF4RTtBQUNELE9BRkQ7QUFHRCxLQWJEO0FBY0QsR0FoQ0Q7QUFpQ0QsQ0E5Q0QiLCJmaWxlIjoiU2VhcmNoU3BlYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcHAgZnJvbSAnLi4vLi4vc3JjL2NvbXBvbmVudHMvQXBwLmpzJztcblxuZGVzY3JpYmUgKCdTZWFyY2gnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0VGVzdFV0aWxzO1xuXG4gIHZhciBhcHAsIHNlYXJjaFlvdVR1YmVTdHViO1xuXG4gIC8vQURWQU5DRUQgVEVTVFxuICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PlxuXG4gIHhkZXNjcmliZSgnd2hlbiByZW5kZXJpbmcgbGl2ZSBkYXRhIGZyb20gWW91VHViZScsIGZ1bmN0aW9uKCkge1xuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG4gICAgICBzZWFyY2hZb3VUdWJlU3R1YiA9IHNpbm9uLnN0dWIoKTtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViLm9uQ2FsbCgwKS55aWVsZHMod2luZG93LmZha2VWaWRlb0RhdGEpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIub25DYWxsKDEpLnlpZWxkcyh3aW5kb3cubW9yZUZha2VWaWRlb0RhdGEpO1xuXG4gICAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICAgIDxBcHAgc2VhcmNoWW91VHViZT17c2VhcmNoWW91VHViZVN0dWJ9IC8+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBsaXN0IHdoZW4gdHlwaW5nIGludG8gdGhlIGlucHV0IGJveCcsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICB2aWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSk7XG4gICAgICB9KTtcblxuICAgICAgdmFyIHNlYXJjaElucHV0RWxlbWVudCA9IGZpbmRSZW5kZXJlZERPTUNvbXBvbmVudFdpdGhDbGFzcyhhcHAsICdmb3JtLWNvbnRyb2wnKTtcbiAgICAgIFNpbXVsYXRlLmNoYW5nZShzZWFyY2hJbnB1dEVsZW1lbnQsIHt0YXJnZXQ6IHt2YWx1ZTogJ1JlYWN0IHR1dG9yaWFsJ319KTtcblxuICAgICAgdmFyIG5ld1ZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG4gICAgICBuZXdWaWRlb0VudHJ5VGl0bGVFbGVtZW50cy5mb3JFYWNoKCh2aWRlb0VudHJ5VGl0bGUsIGkpID0+IHtcbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKG1vcmVGYWtlVmlkZW9EYXRhW2ldLnNuaXBwZXQudGl0bGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=