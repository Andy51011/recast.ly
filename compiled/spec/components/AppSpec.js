import App from '../../src/components/App.js';

describe('App', function () {
  var {
    Simulate,
    renderIntoDocument,
    findRenderedDOMComponentWithClass,
    scryRenderedDOMComponentsWithClass
  } = ReactTestUtils;

  var app;

  beforeEach(function () {
    app = renderIntoDocument(React.createElement(App, { searchYouTube: () => {} }));
  });

  //test is looking for a a stateful class component; class App extends React.Componenent { constructor (props) super(props) render () {.....}}
  it('should be a stateful class component', function () {
    expect(React.Component.isPrototypeOf(App)).to.be.true;
  });

  //basically, app has a video-plaer componenet appended to it;
  it('should render a single VideoPlayer component', function () {
    var videoPlayer = findRenderedDOMComponentWithClass(app, 'video-player');
    expect(videoPlayer).to.exist;
  });

  //basically, app has a video-list componenet appnded to it;
  it('should render a single VideoList component', function () {
    var videoList = findRenderedDOMComponentWithClass(app, 'video-list');
    expect(videoList).to.exist;
  });

  //when a video in the video list is called, the video player is swithced to the clicked video;
  it('should update the video player when a video entry\'s title is clicked', function () {
    // This test will only works once `App` is refactored into a stateful class component
    // because `renderIntoDocument` does not work with stateless class components
    expect(React.Component.isPrototypeOf(App)).to.be.true;

    var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

    videoEntryTitleElements.forEach(videoEntryTitle => {
      Simulate.click(videoEntryTitle);
      var player = findRenderedDOMComponentWithClass(app, 'video-player');
      var playerTitle = player.querySelector('.video-player-details h3');

      // This test assumes that if you can successfully update the video player's title,
      // you can also update the video and description
      expect(playerTitle.innerHTML).to.equal(videoEntryTitle.innerHTML);
    });
  });

  //ADVANCED TESTS
  //==================================================================>

  xdescribe('when rendering live data from YouTube', function () {
    var searchYouTubeStub;

    beforeEach(function () {
      searchYouTubeStub = sinon.stub();
      searchYouTubeStub.yields(window.fakeVideoData);
      app = renderIntoDocument(React.createElement(App, { searchYouTube: searchYouTubeStub }));
    });

    it('should call `searchYouTube` when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;
    });

    it('should load live data when app is initialized', function () {
      expect(searchYouTubeStub.called).to.be.true;

      var videoEntryTitleElements = scryRenderedDOMComponentsWithClass(app, 'video-list-entry-title');

      videoEntryTitleElements.forEach((videoEntryTitle, i) => expect(videoEntryTitle.innerHTML).to.equal(fakeVideoData[i].snippet.title));
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NwZWMvY29tcG9uZW50cy9BcHBTcGVjLmpzeCJdLCJuYW1lcyI6WyJBcHAiLCJkZXNjcmliZSIsIlNpbXVsYXRlIiwicmVuZGVySW50b0RvY3VtZW50IiwiZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzIiwic2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyIsIlJlYWN0VGVzdFV0aWxzIiwiYXBwIiwiYmVmb3JlRWFjaCIsIml0IiwiZXhwZWN0IiwiUmVhY3QiLCJDb21wb25lbnQiLCJpc1Byb3RvdHlwZU9mIiwidG8iLCJiZSIsInRydWUiLCJ2aWRlb1BsYXllciIsImV4aXN0IiwidmlkZW9MaXN0IiwidmlkZW9FbnRyeVRpdGxlRWxlbWVudHMiLCJmb3JFYWNoIiwidmlkZW9FbnRyeVRpdGxlIiwiY2xpY2siLCJwbGF5ZXIiLCJwbGF5ZXJUaXRsZSIsInF1ZXJ5U2VsZWN0b3IiLCJpbm5lckhUTUwiLCJlcXVhbCIsInhkZXNjcmliZSIsInNlYXJjaFlvdVR1YmVTdHViIiwic2lub24iLCJzdHViIiwieWllbGRzIiwid2luZG93IiwiZmFrZVZpZGVvRGF0YSIsImNhbGxlZCIsImkiLCJzbmlwcGV0IiwidGl0bGUiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEdBQVAsTUFBZ0IsNkJBQWhCOztBQUVBQyxTQUFTLEtBQVQsRUFBZ0IsWUFBVztBQUN6QixNQUFJO0FBQ0ZDLFlBREU7QUFFRkMsc0JBRkU7QUFHRkMscUNBSEU7QUFJRkM7QUFKRSxNQUtBQyxjQUxKOztBQU9BLE1BQUlDLEdBQUo7O0FBRUFDLGFBQVcsWUFBVztBQUNwQkQsVUFBTUosbUJBQ0osb0JBQUMsR0FBRCxJQUFLLGVBQWUsTUFBTSxDQUFFLENBQTVCLEdBREksQ0FBTjtBQUdELEdBSkQ7O0FBTUE7QUFDQU0sS0FBRyxzQ0FBSCxFQUEyQyxZQUFXO0FBQ3BEQyxXQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxhQUFoQixDQUE4QmIsR0FBOUIsQ0FBUCxFQUEyQ2MsRUFBM0MsQ0FBOENDLEVBQTlDLENBQWlEQyxJQUFqRDtBQUNELEdBRkQ7O0FBSUE7QUFDQVAsS0FBRyw4Q0FBSCxFQUFtRCxZQUFXO0FBQzVELFFBQUlRLGNBQWNiLGtDQUFrQ0csR0FBbEMsRUFBdUMsY0FBdkMsQ0FBbEI7QUFDQUcsV0FBT08sV0FBUCxFQUFvQkgsRUFBcEIsQ0FBdUJJLEtBQXZCO0FBQ0QsR0FIRDs7QUFLQTtBQUNBVCxLQUFHLDRDQUFILEVBQWlELFlBQVc7QUFDMUQsUUFBSVUsWUFBWWYsa0NBQWtDRyxHQUFsQyxFQUF1QyxZQUF2QyxDQUFoQjtBQUNBRyxXQUFPUyxTQUFQLEVBQWtCTCxFQUFsQixDQUFxQkksS0FBckI7QUFDRCxHQUhEOztBQUtBO0FBQ0FULEtBQUcsdUVBQUgsRUFBNEUsWUFBVztBQUNyRjtBQUNBO0FBQ0FDLFdBQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLGFBQWhCLENBQThCYixHQUE5QixDQUFQLEVBQTJDYyxFQUEzQyxDQUE4Q0MsRUFBOUMsQ0FBaURDLElBQWpEOztBQUVBLFFBQUlJLDBCQUEwQmYsbUNBQW1DRSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7O0FBRUFhLDRCQUF3QkMsT0FBeEIsQ0FBaUNDLGVBQUQsSUFBcUI7QUFDbkRwQixlQUFTcUIsS0FBVCxDQUFlRCxlQUFmO0FBQ0EsVUFBSUUsU0FBU3BCLGtDQUFrQ0csR0FBbEMsRUFBdUMsY0FBdkMsQ0FBYjtBQUNBLFVBQUlrQixjQUFjRCxPQUFPRSxhQUFQLENBQXFCLDBCQUFyQixDQUFsQjs7QUFFQTtBQUNBO0FBQ0FoQixhQUFPZSxZQUFZRSxTQUFuQixFQUE4QmIsRUFBOUIsQ0FBaUNjLEtBQWpDLENBQXVDTixnQkFBZ0JLLFNBQXZEO0FBQ0QsS0FSRDtBQVNELEdBaEJEOztBQWtCQTtBQUNBOztBQUVBRSxZQUFVLHVDQUFWLEVBQW1ELFlBQVc7QUFDNUQsUUFBSUMsaUJBQUo7O0FBRUF0QixlQUFXLFlBQVc7QUFDcEJzQiwwQkFBb0JDLE1BQU1DLElBQU4sRUFBcEI7QUFDQUYsd0JBQWtCRyxNQUFsQixDQUF5QkMsT0FBT0MsYUFBaEM7QUFDQTVCLFlBQU1KLG1CQUNKLG9CQUFDLEdBQUQsSUFBSyxlQUFlMkIsaUJBQXBCLEdBREksQ0FBTjtBQUdELEtBTkQ7O0FBUUFyQixPQUFHLHFEQUFILEVBQTBELFlBQVc7QUFDbkVDLGFBQU9vQixrQkFBa0JNLE1BQXpCLEVBQWlDdEIsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxJQUF2QztBQUNELEtBRkQ7O0FBSUFQLE9BQUcsK0NBQUgsRUFBb0QsWUFBVztBQUM3REMsYUFBT29CLGtCQUFrQk0sTUFBekIsRUFBaUN0QixFQUFqQyxDQUFvQ0MsRUFBcEMsQ0FBdUNDLElBQXZDOztBQUVBLFVBQUlJLDBCQUEwQmYsbUNBQW1DRSxHQUFuQyxFQUF3Qyx3QkFBeEMsQ0FBOUI7O0FBRUFhLDhCQUF3QkMsT0FBeEIsQ0FBZ0MsQ0FBQ0MsZUFBRCxFQUFrQmUsQ0FBbEIsS0FDOUIzQixPQUFPWSxnQkFBZ0JLLFNBQXZCLEVBQWtDYixFQUFsQyxDQUFxQ2MsS0FBckMsQ0FBMkNPLGNBQWNFLENBQWQsRUFBaUJDLE9BQWpCLENBQXlCQyxLQUFwRSxDQURGO0FBR0QsS0FSRDtBQVVELEdBekJEO0FBMEJELENBakZEIiwiZmlsZSI6IkFwcFNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXBwIGZyb20gJy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC5qcyc7XG5cbmRlc2NyaWJlKCdBcHAnLCBmdW5jdGlvbigpIHtcbiAgdmFyIHtcbiAgICBTaW11bGF0ZSxcbiAgICByZW5kZXJJbnRvRG9jdW1lbnQsXG4gICAgZmluZFJlbmRlcmVkRE9NQ29tcG9uZW50V2l0aENsYXNzLFxuICAgIHNjcnlSZW5kZXJlZERPTUNvbXBvbmVudHNXaXRoQ2xhc3NcbiAgfSA9IFJlYWN0VGVzdFV0aWxzO1xuXG4gIHZhciBhcHA7XG5cbiAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICBhcHAgPSByZW5kZXJJbnRvRG9jdW1lbnQoXG4gICAgICA8QXBwIHNlYXJjaFlvdVR1YmU9eygpID0+IHt9fS8+XG4gICAgKTtcbiAgfSk7XG5cbiAgLy90ZXN0IGlzIGxvb2tpbmcgZm9yIGEgYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnQ7IGNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVuZW50IHsgY29uc3RydWN0b3IgKHByb3BzKSBzdXBlcihwcm9wcykgcmVuZGVyICgpIHsuLi4uLn19XG4gIGl0KCdzaG91bGQgYmUgYSBzdGF0ZWZ1bCBjbGFzcyBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICBleHBlY3QoUmVhY3QuQ29tcG9uZW50LmlzUHJvdG90eXBlT2YoQXBwKSkudG8uYmUudHJ1ZTtcbiAgfSk7XG5cbiAgLy9iYXNpY2FsbHksIGFwcCBoYXMgYSB2aWRlby1wbGFlciBjb21wb25lbmV0IGFwcGVuZGVkIHRvIGl0O1xuICBpdCgnc2hvdWxkIHJlbmRlciBhIHNpbmdsZSBWaWRlb1BsYXllciBjb21wb25lbnQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmlkZW9QbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgZXhwZWN0KHZpZGVvUGxheWVyKS50by5leGlzdDtcbiAgfSk7XG5cbiAgLy9iYXNpY2FsbHksIGFwcCBoYXMgYSB2aWRlby1saXN0IGNvbXBvbmVuZXQgYXBwbmRlZCB0byBpdDtcbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSBzaW5nbGUgVmlkZW9MaXN0IGNvbXBvbmVudCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWRlb0xpc3QgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tbGlzdCcpO1xuICAgIGV4cGVjdCh2aWRlb0xpc3QpLnRvLmV4aXN0O1xuICB9KTtcblxuICAvL3doZW4gYSB2aWRlbyBpbiB0aGUgdmlkZW8gbGlzdCBpcyBjYWxsZWQsIHRoZSB2aWRlbyBwbGF5ZXIgaXMgc3dpdGhjZWQgdG8gdGhlIGNsaWNrZWQgdmlkZW87XG4gIGl0KCdzaG91bGQgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIgd2hlbiBhIHZpZGVvIGVudHJ5XFwncyB0aXRsZSBpcyBjbGlja2VkJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyB0ZXN0IHdpbGwgb25seSB3b3JrcyBvbmNlIGBBcHBgIGlzIHJlZmFjdG9yZWQgaW50byBhIHN0YXRlZnVsIGNsYXNzIGNvbXBvbmVudFxuICAgIC8vIGJlY2F1c2UgYHJlbmRlckludG9Eb2N1bWVudGAgZG9lcyBub3Qgd29yayB3aXRoIHN0YXRlbGVzcyBjbGFzcyBjb21wb25lbnRzXG4gICAgZXhwZWN0KFJlYWN0LkNvbXBvbmVudC5pc1Byb3RvdHlwZU9mKEFwcCkpLnRvLmJlLnRydWU7XG5cbiAgICB2YXIgdmlkZW9FbnRyeVRpdGxlRWxlbWVudHMgPSBzY3J5UmVuZGVyZWRET01Db21wb25lbnRzV2l0aENsYXNzKGFwcCwgJ3ZpZGVvLWxpc3QtZW50cnktdGl0bGUnKTtcblxuICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSkgPT4ge1xuICAgICAgU2ltdWxhdGUuY2xpY2sodmlkZW9FbnRyeVRpdGxlKTtcbiAgICAgIHZhciBwbGF5ZXIgPSBmaW5kUmVuZGVyZWRET01Db21wb25lbnRXaXRoQ2xhc3MoYXBwLCAndmlkZW8tcGxheWVyJyk7XG4gICAgICB2YXIgcGxheWVyVGl0bGUgPSBwbGF5ZXIucXVlcnlTZWxlY3RvcignLnZpZGVvLXBsYXllci1kZXRhaWxzIGgzJyk7XG5cbiAgICAgIC8vIFRoaXMgdGVzdCBhc3N1bWVzIHRoYXQgaWYgeW91IGNhbiBzdWNjZXNzZnVsbHkgdXBkYXRlIHRoZSB2aWRlbyBwbGF5ZXIncyB0aXRsZSxcbiAgICAgIC8vIHlvdSBjYW4gYWxzbyB1cGRhdGUgdGhlIHZpZGVvIGFuZCBkZXNjcmlwdGlvblxuICAgICAgZXhwZWN0KHBsYXllclRpdGxlLmlubmVySFRNTCkudG8uZXF1YWwodmlkZW9FbnRyeVRpdGxlLmlubmVySFRNTCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIC8vQURWQU5DRUQgVEVTVFNcbiAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0+XG5cbiAgeGRlc2NyaWJlKCd3aGVuIHJlbmRlcmluZyBsaXZlIGRhdGEgZnJvbSBZb3VUdWJlJywgZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNlYXJjaFlvdVR1YmVTdHViO1xuXG4gICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHNlYXJjaFlvdVR1YmVTdHViID0gc2lub24uc3R1YigpO1xuICAgICAgc2VhcmNoWW91VHViZVN0dWIueWllbGRzKHdpbmRvdy5mYWtlVmlkZW9EYXRhKTtcbiAgICAgIGFwcCA9IHJlbmRlckludG9Eb2N1bWVudChcbiAgICAgICAgPEFwcCBzZWFyY2hZb3VUdWJlPXtzZWFyY2hZb3VUdWJlU3R1Yn0gLz5cbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGwgYHNlYXJjaFlvdVR1YmVgIHdoZW4gYXBwIGlzIGluaXRpYWxpemVkJywgZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3Qoc2VhcmNoWW91VHViZVN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGxpdmUgZGF0YSB3aGVuIGFwcCBpcyBpbml0aWFsaXplZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgZXhwZWN0KHNlYXJjaFlvdVR1YmVTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcblxuICAgICAgdmFyIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzID0gc2NyeVJlbmRlcmVkRE9NQ29tcG9uZW50c1dpdGhDbGFzcyhhcHAsICd2aWRlby1saXN0LWVudHJ5LXRpdGxlJyk7XG5cbiAgICAgIHZpZGVvRW50cnlUaXRsZUVsZW1lbnRzLmZvckVhY2goKHZpZGVvRW50cnlUaXRsZSwgaSkgPT5cbiAgICAgICAgZXhwZWN0KHZpZGVvRW50cnlUaXRsZS5pbm5lckhUTUwpLnRvLmVxdWFsKGZha2VWaWRlb0RhdGFbaV0uc25pcHBldC50aXRsZSlcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcbiJdfQ==